---
import { getT } from "@/i18n/t";
import { defaultLang } from "@/i18n/ui";
import { getCollection } from "astro:content";

const lang = Astro.currentLocale || defaultLang;
const t = getT(lang);

// Your logic for fetching and sorting countries
const countryList = await getCollection("countries");
const counties = countryList.filter(entry => entry.slug.split("/")[0]== lang).sort((a,b) => a.data.order - b.data.order)
---
<!-- MODIFICATION: The 'lang' variable is now passed as a data attribute -->
<div id="checkout-form-container" class="w-full mx-auto grid grid-cols-1 lg:grid-cols-2 lg:gap-16" data-lang={lang}>
    <!-- Left Side: Customer Information Form -->
    <div class="checkout-form bg-zinc-800/50 p-6 sm:p-8 rounded-lg border border-zinc-700">
        <h2 class="text-2xl font-bold text-zinc-100 border-b border-zinc-700 pb-4 mb-6">{t("Contact & Shipping")}</h2>
        <form id="customer-info-form" class="space-y-4">
            <!-- ... other form fields (first name, last name, email, address) are unchanged ... -->
             <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                    <label for="first_name" class="block text-sm font-medium text-zinc-300">{t("First Name")}</label>
                    <input type="text" id="first_name" name="first_name" required class="address-field mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
                </div>
                <div>
                    <label for="last_name" class="block text-sm font-medium text-zinc-300">{t("Last Name")}</label>
                    <input type="text" id="last_name" name="last_name" required class="address-field mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
                </div>
            </div>
             <div>
                <label for="client_email" class="block text-sm font-medium text-zinc-300">{t("Email Address")}</label>
                <input type="email" id="client_email" name="client_email" required class="address-field mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
            </div>
            <div>
                <label for="address1" class="block text-sm font-medium text-zinc-300">{t("Address")}</label>
                <input type="text" id="address1" name="address1" required class="address-field mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2" placeholder={t("Street address")}>
            </div>
             <div>
                <input type="text" id="address2" name="address2" class="address-field mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2" placeholder={t("Apartment, suite, etc. (optional)")}>
            </div>
            
            <!-- MODIFICATION START: State/Province and Country fields -->
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                 <div>
                    <label for="country" class="block text-sm font-medium text-zinc-300">{t("Country")}</label>
                    <select id="country" name="country" required class="address-field mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
                        <option value="">{t("Select a country...")}</option>
                        {
                          counties.map(entry => (
                            <option value={entry.data.code}>{entry.data.title}</option>
                          ))
                        }
                    </select>
                </div>
                <div>
                    <label for="state" class="block text-sm font-medium text-zinc-300">{t("State / Province")}</label>
                    <!-- This container will be dynamically updated by the script -->
                    <div id="state-field-container" class="mt-1">
                        <input type="text" id="state" name="state" required class="address-field block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
                    </div>
                </div>
            </div>
             <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                    <label for="city" class="block text-sm font-medium text-zinc-300">{t("City")}</label>
                    <input type="text" id="city" name="city" required class="address-field mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
                </div>
                <div>
                    <label for="zipcode" class="block text-sm font-medium text-zinc-300">{t("ZIP / Postal Code")}</label>
                    <input type="text" id="zipcode" name="zipcode" required class="address-field mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
                </div>
            </div>
            <!-- MODIFICATION END -->
            
            <!-- ... submit button is unchanged ... -->
            <div class="pt-6">
                <button type="submit" id="pay-now-button" class="w-full flex justify-center items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-zinc-900 bg-amber-500 hover:bg-amber-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-zinc-900 focus:ring-amber-500 disabled:bg-zinc-600 disabled:cursor-not-allowed">
                     <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg>
                     <span>{t("Pay with Lightning")}</span>
                </button>
                <p id="checkout-error-message" class="text-red-400 text-sm mt-2 text-center hidden"></p>
            </div>
        </form>
    </div>

    <!-- ... Right Side: Order Summary is unchanged ... -->
    <div class="order-summary mt-10 lg:mt-0">
        <h2 class="text-2xl font-bold text-zinc-100 border-b border-zinc-700 pb-4 mb-6">{t("Order Summary")}</h2>
        <div id="summary-items-container" class="space-y-4"></div>
        <div class="py-6 border-b border-t border-zinc-700 mt-6 space-y-2">
            <div class="flex justify-between text-zinc-300">
                <span>{t("Subtotal")}</span>
                <span id="summary-subtotal">$0.00</span>
            </div>
            <div id="shipping-container" class="flex justify-between text-zinc-300">
                 <span>{t("Shipping")}</span>
                 <span id="summary-shipping">{t("Enter address to calculate")}</span>
            </div>
            <div id="taxes-container" class="hidden flex-col text-zinc-300"></div>
        </div>
        <div class="py-4 border-b border-zinc-700">
            <div class="flex justify-between items-center text-zinc-300">
                <span>{t("Payment Method")}</span>
                <div class="flex items-center gap-2 font-medium text-zinc-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-amber-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg>
                    <span>{t("Lightning Network")}</span>
                </div>
            </div>
        </div>
        <div class="flex justify-between text-xl font-bold text-white pt-4">
            <span>{t("Total")}</span>
            <span id="summary-total">$0.00</span>
        </div>
    </div>
</div>

<script is:inline>
    // --- MODIFICATION: Get language from the container's data attribute ---
    const checkoutContainer = document.getElementById('checkout-form-container');
    const lang = checkoutContainer.dataset.lang;

    // --- DOM ELEMENTS ---
    const countrySelect = document.getElementById('country');
    const stateFieldContainer = document.getElementById('state-field-container');
    // ... other DOM elements are unchanged ...
    const summaryItemsContainer = document.getElementById('summary-items-container');
    const subtotalEl = document.getElementById('summary-subtotal');
    const totalEl = document.getElementById('summary-total');
    const form = document.getElementById('customer-info-form');
    const payButton = document.getElementById('pay-now-button');
    const errorMessageEl = document.getElementById('checkout-error-message');
    const shippingContainer = document.getElementById('shipping-container');
    const shippingEl = document.getElementById('summary-shipping');
    const taxesContainer = document.getElementById('taxes-container');

    // --- HELPER FUNCTIONS for dynamic field creation ---
    function createStateSelect(states) {
        const select = document.createElement('select');
        select.id = 'state';
        select.name = 'state';
        select.required = true;
        select.className = 'address-field block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2';
        
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = 'Select a state...'; // Consider using t() here if possible
        select.appendChild(defaultOption);

        states.forEach(state => {
            const option = document.createElement('option');
            option.value = state.code;
            option.textContent = state.name;
            select.appendChild(option);
        });
        return select;
    }

    function createStateInput() {
        const input = document.createElement('input');
        input.type = 'text';
        input.id = 'state';
        input.name = 'state';
        input.required = true;
        input.className = 'address-field block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2';
        return input;
    }
    
    // --- EVENT LISTENERS ---
    countrySelect.addEventListener('change', async (event) => {
        const countryCode = event.target.value;
        stateFieldContainer.innerHTML = ''; // Clear previous field

        if (!countryCode) {
            // If no country is selected, revert to a text input
            stateFieldContainer.appendChild(createStateInput());
            return;
        }

        const url = `/static/states/${countryCode.toLowerCase()}-${lang}.json`;
        
        try {
            const response = await fetch(url);
            if (!response.ok) {
                // If the file doesn't exist (404), fallback to a text input
                throw new Error('No state list for this country.');
            }
            const states = await response.json();
            
            // If data is found, create and append the select dropdown
            stateFieldContainer.appendChild(createStateSelect(states));

        } catch (error) {
            // On any error (like 404), ensure it's a text input
            console.warn(error.message);
            stateFieldContainer.appendChild(createStateInput());
        }
    });

    // ... All other script logic (state, config, placeholders, core logic) remains the same ...
    let subtotal = 0;
    let shippingCost = 0;
    let taxAmount = 0;

    const MERCHANT_PUBKEY = "031c0e3c288cdb22cd8b87348547f12439da26c83adbca6814f561fb67a7a8e450";
    const MERCHANT_EMAIL = "your-merchant-email@example.com";
    const CURRENCY = "USD";
    const TAX_API_URL = "https://ln.tejory.io/checkout/api/v1/tax";
    const FROM_ADDRESS = {
        from_country: "US",
        from_zip: "11003",
        from_state: "NY"
    };

    async function getShippingOptions(country, state, city, zipcode) { return Promise.resolve([{"name":"USPS Ground Advantage (2-5 Business Days)","fee":5.0,"discounted_fee":0.0}]); }
    
    async function getTaxes(country, state, city, zipcode, currentSubtotal, currentShipping) {
        if (!country || !state || !city || !zipcode) {
             return Promise.resolve([{"name":"NA","active":false,"amount":0.0}]);
        }
        try {
            const response = await fetch(TAX_API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    ...FROM_ADDRESS,
                    to_country: country,
                    to_state: state,
                    to_city: city,
                    to_zip: zipcode,
                    amount: currentSubtotal,
                    shipping: currentShipping
                })
            });
            if (!response.ok) {
                throw new Error('Tax API request failed');
            }
            const data = await response.json();
            if (data.tax && data.tax.amount_to_collect > 0) {
                return [{
                    name: "Sales Tax",
                    active: true,
                    amount: data.tax.amount_to_collect
                }];
            }
            return [{"name":"NA","active":false,"amount":0.0}];
        } catch (error) {
            console.error("Error fetching taxes:", error);
            return [{"name":"NA","active":false,"amount":0.0}];
        }
    }

    function formatCurrency(amount) { return `$${amount.toFixed(2)}`; }

    function renderSummary() {
        const cart = JSON.parse(localStorage.getItem('cart') || '{}');
        const items = Object.values(cart);
        summaryItemsContainer.innerHTML = '';
        subtotal = 0;
        if (items.length === 0) { window.location.href = `/${lang}/cart`; return; }
        items.forEach(item => {
            const itemTotalPrice = item.price * item.quantity;
            subtotal += itemTotalPrice;
            summaryItemsContainer.innerHTML += `<div class="flex items-center gap-4"><div class="relative"><img src="${item.imageSrc}" alt="${item.name}" class="w-16 h-16 rounded-md object-cover border border-zinc-700"><span class="absolute -top-2 -right-2 flex items-center justify-center h-5 w-5 bg-zinc-600 text-zinc-100 text-xs font-medium rounded-full">${item.quantity}</span></div><p class="flex-grow font-semibold text-zinc-200">${item.name}</p><p class="font-medium text-zinc-300">${formatCurrency(itemTotalPrice)}</p></div>`;
        });
        subtotalEl.textContent = formatCurrency(subtotal);
        updateTotals();
    }
    async function updateShippingAndTaxes() {
        const formData = new FormData(form);
        const country = formData.get('country'), state = formData.get('state'), city = formData.get('city'), zipcode = formData.get('zipcode');
        shippingCost = 0; taxAmount = 0;
        
        const shippingOptions = await getShippingOptions(country, state, city, zipcode);
        renderShipping(shippingOptions);
        
        const taxData = await getTaxes(country, state, city, zipcode, subtotal, shippingCost);
        renderTaxes(taxData);
        
        updateTotals();
    }
    function renderShipping(options) {
        if (!options || options.length === 0) { shippingEl.innerHTML = `<span class="text-red-400">Cannot ship to this address</span>`; shippingCost = 0; return; }
        const option = options[0]; let feeHTML = '';
        if (option.discounted_fee !== null && option.discounted_fee !== option.fee) { 
            shippingCost = option.discounted_fee; 
            feeHTML = `<del class="text-zinc-500">${formatCurrency(option.fee)}</del> <strong class="text-green-400">${formatCurrency(option.discounted_fee)}</strong>`; 
        } else { 
            shippingCost = option.fee; 
            feeHTML = `<strong>${formatCurrency(option.fee)}</strong>`; 
        }
        shippingEl.innerHTML = `<span>${option.name}</span>${feeHTML}`;
    }
    function renderTaxes(taxes) {
        taxesContainer.innerHTML = ''; taxAmount = 0;
        const activeTaxes = taxes.filter(t => t.active);
        if (activeTaxes.length > 0) {
            taxesContainer.classList.remove('hidden');
            activeTaxes.forEach(tax => { taxAmount += tax.amount; taxesContainer.innerHTML += `<div class="flex justify-between"><span>${tax.name}</span><span>${formatCurrency(tax.amount)}</span></div>`; });
        } else { taxesContainer.classList.add('hidden'); }
    }
    function updateTotals() { 
        const grandTotal = subtotal + shippingCost + taxAmount;
        totalEl.textContent = formatCurrency(grandTotal); 
    }
    async function handleFormSubmit(event) {
        event.preventDefault();
        payButton.disabled = true;
        const payButtonText = payButton.querySelector('span');
        payButtonText.textContent = "Processing...";
        errorMessageEl.classList.add('hidden');
        const formData = new FormData(form);
        const cart = JSON.parse(localStorage.getItem('cart') || '{}');
        const items = Object.values(cart);
        const orderDetails = items.map(item => ({ name: item.name, quantity: String(item.quantity), unit_price: String(item.price.toFixed(2)), total_price: String((item.price * item.quantity).toFixed(2)), }));
        
        const grandTotal = subtotal + shippingCost + taxAmount;

        const payload = {
            amount_fiat: String(grandTotal.toFixed(2)), 
            currency: CURRENCY, 
            order_details: orderDetails, 
            pubkey: MERCHANT_PUBKEY, 
            merchant_email: MERCHANT_EMAIL,
            return_url: `${window.location.origin}/${lang}/thank-you`,
            first_name: formData.get('first_name'), 
            last_name: formData.get('last_name'), 
            client_email: formData.get('client_email'),
            address1: formData.get('address1'), 
            address2: formData.get('address2'), 
            city: formData.get('city'), 
            state: formData.get('state'),
            zipcode: formData.get('zipcode'), 
            country: formData.get('country'),
        };
        try {
            const response = await fetch('/api/v1/checkout', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
            if (!response.ok) { const errorData = await response.text(); throw new Error(errorData || 'Failed to create checkout session.'); }
            const data = await response.json();
            window.location.href = data.paymentPageUrl;
        } catch (error) {
            console.error("Checkout error:", error);
            errorMessageEl.textContent = error.message;
            errorMessageEl.classList.remove('hidden');
            payButton.disabled = false;
            payButtonText.textContent = "Pay with Lightning";
        }
    }
    document.addEventListener('DOMContentLoaded', renderSummary);
    form.addEventListener('input', (event) => { if (event.target.classList.contains('address-field')) { updateShippingAndTaxes(); } });
    form.addEventListener('submit', handleFormSubmit);
</script>

