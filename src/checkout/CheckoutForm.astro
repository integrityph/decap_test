---
import { getT } from "@/i18n/t";
import { defaultLang } from "@/i18n/ui";

const lang = Astro.currentLocale || defaultLang;
const t = getT(lang);
---
<div id="checkout-form-container" class="w-full mx-auto grid grid-cols-1 lg:grid-cols-2 lg:gap-16">
    <!-- Left Side: Customer Information Form -->
    <div class="checkout-form bg-zinc-800/50 p-6 sm:p-8 rounded-lg border border-zinc-700">
        <h2 class="text-2xl font-bold text-zinc-100 border-b border-zinc-700 pb-4 mb-6">{t("Contact & Shipping")}</h2>
        <form id="customer-info-form" class="space-y-4">
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div>
                    <label for="first_name" class="block text-sm font-medium text-zinc-300">{t("First Name")}</label>
                    <input type="text" id="first_name" name="first_name" required class="mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
                </div>
                <div>
                    <label for="last_name" class="block text-sm font-medium text-zinc-300">{t("Last Name")}</label>
                    <input type="text" id="last_name" name="last_name" required class="mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
                </div>
            </div>
             <div>
                <label for="client_email" class="block text-sm font-medium text-zinc-300">{t("Email Address")}</label>
                <input type="email" id="client_email" name="client_email" required class="mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
            </div>
            <div>
                <label for="address1" class="block text-sm font-medium text-zinc-300">{t("Address")}</label>
                <input type="text" id="address1" name="address1" required class="mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2" placeholder={t("Street address")}>
            </div>
             <div>
                <input type="text" id="address2" name="address2" class="mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2" placeholder={t("Apartment, suite, etc. (optional)")}>
            </div>
             <div class="grid grid-cols-1 sm:grid-cols-3 gap-4">
                <div>
                    <label for="city" class="block text-sm font-medium text-zinc-300">{t("City")}</label>
                    <input type="text" id="city" name="city" required class="mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
                </div>
                <div>
                    <label for="state" class="block text-sm font-medium text-zinc-300">{t("State / Province")}</label>
                    <input type="text" id="state" name="state" required class="mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
                </div>
                <div>
                    <label for="zipcode" class="block text-sm font-medium text-zinc-300">{t("ZIP / Postal Code")}</label>
                    <input type="text" id="zipcode" name="zipcode" required class="mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
                </div>
            </div>
             <div>
                <label for="country" class="block text-sm font-medium text-zinc-300">{t("Country")}</label>
                <input type="text" id="country" name="country" required class="mt-1 block w-full bg-zinc-700 border-zinc-600 rounded-md shadow-sm focus:ring-amber-500 focus:border-amber-500 sm:text-sm text-white p-2">
            </div>

            <!-- This is where the submit button and error messages will go -->
            <div class="pt-6">
                <button type="submit" id="pay-now-button" class="w-full flex justify-center items-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-zinc-900 bg-amber-500 hover:bg-amber-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-zinc-900 focus:ring-amber-500 disabled:bg-zinc-600 disabled:cursor-not-allowed">
                     <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg>
                     <span>{t("Pay with Lightning")}</span>
                </button>
                <p id="checkout-error-message" class="text-red-400 text-sm mt-2 text-center hidden"></p>
            </div>
        </form>
    </div>

    <!-- Right Side: Order Summary -->
    <div class="order-summary mt-10 lg:mt-0 px-4">
        <h2 class="text-2xl font-bold text-zinc-100 border-b border-zinc-700 pb-4 mb-6">{t("Order Summary")}</h2>
        <div id="summary-items-container" class="space-y-4">
            <!-- JS will render summary items here -->
        </div>
        <div class="py-6 border-b border-t border-zinc-700 mt-6 space-y-2">
            <div class="flex justify-between text-zinc-300">
                <span>{t("Subtotal")}</span>
                <span id="summary-subtotal">$0.00</span>
            </div>
            <div class="flex justify-between text-zinc-300">
                <span>{t("Shipping")}</span>
                <span id="summary-shipping">{t("Free")}</span>
            </div>
        </div>
        <div class="py-4 border-b border-zinc-700">
            <div class="flex justify-between items-center text-zinc-300">
                <span>{t("Payment Method")}</span>
                <div class="flex items-center gap-2 font-medium text-zinc-100">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-amber-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg>
                    <span>{t("Lightning Network")}</span>
                </div>
            </div>
        </div>
        <div class="flex justify-between text-xl font-bold text-white pt-4">
            <span>{t("Total")}</span>
            <span id="summary-total">$0.00</span>
        </div>
    </div>
</div>

<script is:inline>
    // --- CONFIGURATION (should match your merchant account) ---
    const MERCHANT_PUBKEY = "031c0e3c288cdb22cd8b87348547f12439da26c83adbca6814f561fb67a7a8e450";
    const MERCHANT_EMAIL = "tickets@tejory.p.tawk.email";
    const CURRENCY = "USD"; // Or get dynamically if you support multiple

    // --- DOM ELEMENTS ---
    const summaryItemsContainer = document.getElementById('summary-items-container');
    const subtotalEl = document.getElementById('summary-subtotal');
    const totalEl = document.getElementById('summary-total');
    const form = document.getElementById('customer-info-form');
    const payButton = document.getElementById('pay-now-button');
    const errorMessageEl = document.getElementById('checkout-error-message');

    function formatCurrency(amount) {
        return `$${amount.toFixed(2)}`;
    }

    function renderSummary() {
        const cart = JSON.parse(localStorage.getItem('cart') || '{}');
        const items = Object.values(cart);
        summaryItemsContainer.innerHTML = '';
        let subtotal = 0;

        if (items.length === 0) {
            // If the cart is empty, redirect back to the cart page.
            window.location.href = `/cart/${document.documentElement.lang || 'en'}`;
            return;
        }

        items.forEach(item => {
            const itemTotalPrice = item.price * item.quantity;
            subtotal += itemTotalPrice;
            const itemHTML = `
                <div class="flex items-center gap-4">
                    <div class="relative">
                        <img src="${item.imageSrc}" alt="${item.name}" class="w-16 h-16 rounded-md object-cover border border-zinc-700">
                        <span class="absolute -top-2 -right-2 flex items-center justify-center h-5 w-5 bg-zinc-600 text-zinc-100 text-xs font-medium rounded-full">${item.quantity}</span>
                    </div>
                    <p class="flex-grow font-semibold text-zinc-200">${item.name}</p>
                    <p class="font-medium text-zinc-300">${formatCurrency(itemTotalPrice)}</p>
                </div>
            `;
            summaryItemsContainer.innerHTML += itemHTML;
        });

        subtotalEl.textContent = formatCurrency(subtotal);
        totalEl.textContent = formatCurrency(subtotal);
    }

    async function handleFormSubmit(event) {
        event.preventDefault();
        payButton.disabled = true;
        const payButtonText = payButton.querySelector('span');
        payButtonText.textContent = "Processing...";
        errorMessageEl.classList.add('hidden');

        const formData = new FormData(form);
        const cart = JSON.parse(localStorage.getItem('cart') || '{}');
        const items = Object.values(cart);

        const orderDetails = items.map(item => ({
            name: item.name,
            quantity: String(item.quantity),
            unit_price: String(item.price.toFixed(2)),
            total_price: String((item.price * item.quantity).toFixed(2)),
        }));

        const subtotal = items.reduce((sum, item) => sum + item.price * item.quantity, 0);

        const payload = {
            // Order Details
            amount_fiat: String(subtotal.toFixed(2)),
            currency: CURRENCY,
            order_details: orderDetails,
            
            // Merchant Details
            pubkey: MERCHANT_PUBKEY,
            merchant_email: MERCHANT_EMAIL,
						store_name: 'Tejory',
            return_url: `${window.location.origin}/thank-you/${document.documentElement.lang || 'en'}`,
            
            // Client Details from form
            first_name: formData.get('first_name'),
            last_name: formData.get('last_name'),
            client_email: formData.get('client_email'),
            address1: formData.get('address1'),
            address2: formData.get('address2'),
            city: formData.get('city'),
            state: formData.get('state'),
            zipcode: formData.get('zipcode'),
            country: formData.get('country'),
        };

        try {
            const response = await fetch('https://ln.tejory.io/checkout/api/v1/checkout', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorData = await response.text();
                throw new Error(errorData || 'Failed to create checkout session.');
            }

            const data = await response.json();
            // Redirect to the payment page provided by the microservice
            window.location.href = 'https://ln.tejory.io' + data.paymentPageUrl;

        } catch (error) {
            console.error("Checkout error:", error);
            errorMessageEl.textContent = error.message;
            errorMessageEl.classList.remove('hidden');
            payButton.disabled = false;
            payButtonText.textContent = "Pay with Lightning";
        }
    }

    document.addEventListener('DOMContentLoaded', renderSummary);
    form.addEventListener('submit', handleFormSubmit);
</script>

