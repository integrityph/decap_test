---
import { getEntry } from "astro:content";
import { defaultLang } from "@/i18n/ui";
import AddToCart from "@/checkout/AddToCart.astro";
import { Icon } from "astro-icon/components";

const lang = Astro.currentLocale || defaultLang;

let { slug } = Astro.props;

if (slug.indexOf("/") == -1) {
  slug = `${lang}/${slug}`;
}
const product = await getEntry("products", slug);
if (!product) {
  throw new Error(`Could not find '${slug}' in the 'products' collection.`);
}

const featureList = (
	await Promise.all(
		product.data.features?.map(async (featureSlug) => {
			const fullSlug = `${lang}/${featureSlug}`;

			const featureEntry = await getEntry("features", fullSlug);
			if (!featureEntry) {
				return;
			}
			const { Content } = await featureEntry.render();
			return {
				name: featureEntry.data.name,
				Content: Content,
				icon: featureEntry.data.custom_icon || featureEntry.data.icon,
			};
		}) ?? [],
	)
).filter((entry) => entry != null && entry != undefined);

// This component is now aware of your schema.

const BASE_URL = '';
// Automatically gather all available images from the schema
const images = [
  product.data.image1, 
  product.data.image2, 
  product.data.image3, 
  product.data.image4, 
  product.data.image5
].filter(Boolean); // .filter(Boolean) neatly removes any undefined/null entries
---

<!-- <script>
  // Simple client-side script to handle image switching
  document.addEventListener('astro:page-load', () => {
    const mainImage = document.getElementById('main-product-image');
    if (!mainImage) return; // Guard clause in case component isn't on the page
    const thumbnails = document.querySelectorAll('.product-thumbnail');

    thumbnails.forEach(thumb => {
      thumb.addEventListener('click', () => {
        thumbnails.forEach(t => t.classList.remove('ring-2', 'ring-amber-400'));
        thumb.classList.add('ring-2', 'ring-amber-400');
        mainImage.src = thumb.dataset.imageSrc;
      });
    });
  });
</script> -->

<script>
  // Simple client-side script to handle image switching
  document.addEventListener('astro:page-load', () => {
    // FIX 1: Assert the type as HTMLImageElement
    const mainImage = document.getElementById('main-product-image') as HTMLImageElement;

    if (!mainImage) return; // Guard clause is still good practice

    // FIX 2: Provide a generic to querySelectorAll so it knows to expect HTMLElements
    const thumbnails = document.querySelectorAll<HTMLElement>('.product-thumbnail');

    thumbnails.forEach(thumb => {
      thumb.addEventListener('click', () => {
        thumbnails.forEach(t => t.classList.remove('ring-2', 'ring-amber-400'));
        thumb.classList.add('ring-2', 'ring-amber-400');
        
        // Both errors are now resolved!
        mainImage.src = thumb.dataset.imageSrc??"";
      });
    });
  });
</script>

<div class="grid grid-cols-1 md:grid-cols-5 md:gap-12 w-full mb-16">

  <div class="md:col-span-2">
    <img
      id="main-product-image"
      class="w-full h-auto object-cover rounded-lg shadow-2xl aspect-square transition-all duration-300"
      src=`${BASE_URL}${product.data.image1}`
      alt={`${product.data.name} main view`}
    />
    <div class="grid grid-cols-5 gap-2 mt-4">
      {images.map((img, index) => (
        <button class:list={[
          "product-thumbnail rounded-md p-1 bg-zinc-800/50 hover:bg-zinc-700/50 transition-all",
          index === 0 && "ring-2 ring-amber-400"
        ]} data-image-src={`${BASE_URL}${img}`}>
          <img
            class="w-full h-auto object-cover rounded-sm aspect-square"
            src={`${BASE_URL}${img}`}
            alt={`${product.data.name} thumbnail ${index + 1}`}
          />
        </button>
      ))}
    </div>
  </div>

  <div class="md:col-span-3 mt-8 md:mt-0 flex flex-col justify-center">

    <div class="border-b border-zinc-700 pb-4">
      <h1 class="text-4xl lg:text-5xl font-extrabold text-white tracking-tight">
        {product.data.name}
      </h1>
      {product.data.slogan && (
        <p class="mt-2 text-lg text-zinc-400 font-light">
          {product.data.slogan}
        </p>
      )}
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 gap-6 my-6">
      <div class="space-y-3">
         {featureList?.map(feature => (
          <div class="flex items-start text-sm">
            {/* <svg class="w-4 h-4 mr-2 mt-0.5 flex-shrink-0 text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg> */}
						{
							(feature.icon!.indexOf(",")==-1) ? 
							<Icon name={`fa6-solid:${feature.icon}`} class="w-4 h-4 text-amber-400" />
							:
							<span class="inline-flex relative w-12 h-12 items-center justify-center">
								<Icon name={`fa6-solid:${feature.icon?.split(",")[0]}`} class="w-3 h-3 absolute text-amber-400" />
								<Icon name={`fa6-solid:${feature.icon?.split(",")[1]}`} class="w-4 h-5 absolute text-amber-400" />
							</span>
						}
            <span class="ms-3 text-zinc-300">{feature.name}</span>
          </div>
         ))}
      </div>
       <div class="flex flex-col items-start justify-start">
        <div class="flex items-center">
           {Array.from({ length: 5 }).map((_, index) => (
              <svg class={`w-5 h-5 ${index < Math.round(product.data.rating!) ? 'text-yellow-300' : 'text-zinc-600'}`} fill="currentColor" viewBox="0 0 22 20"><path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z" /></svg>
          ))}
					<span class="text-zinc-400 text-sm ms-2">{product.data.rating!}</span>
        </div>
        {product.data.number_of_ratings && (
          <span class="text-zinc-400 text-sm mt-2">
            Based on {product.data.number_of_ratings} community reviews
          </span>
        )}
      </div>
    </div>

    <div class="bg-zinc-800/50 border border-zinc-700 rounded-lg p-6 mt-4">
      <div class="flex flex-col sm:flex-row justify-between sm:items-center gap-4">
        <div>
          {product.data.discounted_price ? <span class="text-sm font-medium text-amber-400">SPECIAL DISCOUNT</span> : ""}
          {product.data.discounted_price ? (
            <div class="flex items-baseline gap-3">
              <span class="text-4xl font-bold text-white">${product.data.discounted_price.toFixed(2)}</span>
              <span class="text-2xl font-light text-zinc-500 line-through">${product.data.price!.toFixed(2)}</span>
            </div>
          ) : (
             <div class="text-4xl font-bold text-white">${product.data.price?.toFixed(2) || 'Coming Soon'}</div>
          )}
        </div>
        <div class="w-full sm:w-1/2">
           <AddToCart product={product} />
        </div>
      </div>
      <p class="text-xs text-zinc-500 mt-3 text-center">Secure checkout via Tejory Checkout with <Icon name=`fa6-solid:bolt` class="w-4 h-5 text-amber-400 inline-block" /> Bitcoin Lightning</p>
    </div>

  </div>
</div>




<!-- ---
import { getEntry } from "astro:content";
import { defaultLang } from "@/i18n/ui";
import AddToCart from "@/checkout/AddToCart.astro";
const lang = Astro.currentLocale || defaultLang;

// This component expects to receive the 'slug' of the CTA to render
let { slug } = Astro.props;

if (slug.indexOf("/") == -1) {
	slug = `${lang}/${slug}`;
}

const product = await getEntry("products", slug);

if (!product) {
	throw new Error(
		`Could not find the '${slug}' page in the 'products' content collection.`,
	);
}

const BASE_URL = '';
---
<div
	class="w-full max-w-sm bg-white border border-zinc-200 rounded-lg shadow-sm dark:bg-zinc-800 dark:border-zinc-700"
>
	<a href="#">
		<img
			class="p-8 rounded-t-lg"
			src=`${BASE_URL}${product.data.image1}`
			alt="product image"
		/>
	</a>
	<div class="px-5 pb-5">
		<a href="#">
			<h5
				class="text-xl font-semibold tracking-tight text-zinc-900 dark:text-white"
			>
				{product.data.name}
			</h5>
		</a>
		<div class="flex items-center mt-2.5 mb-5">
			<div class="flex items-center space-x-1 rtl:space-x-reverse">
				{
					Array.from({ length: 5 }).map((_, index) =>
						index < Math.round(product.data.rating!) ? (
							<svg
								class="w-4 h-4 text-yellow-300"
								aria-hidden="true"
								xmlns="http://www.w3.org/2000/svg"
								fill="currentColor"
								viewBox="0 0 22 20"
							>
								<path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z" />
							</svg>
						) : (
							<svg
								class="w-4 h-4 text-zinc-200 dark:text-zinc-600"
								aria-hidden="true"
								xmlns="http://www.w3.org/2000/svg"
								fill="currentColor"
								viewBox="0 0 22 20"
							>
								<path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z" />
							</svg>
						),
					)
				}
			</div>
			<span
				class="bg-amber-100 text-amber-800 text-xs font-semibold px-2.5 py-0.5 rounded-sm dark:bg-amber-200 dark:text-amber-800 ms-3"
				>{product.data.rating?.toFixed(1)}</span
			>
		</div>
		<div class="flex items-center justify-between">
			{
				(product.data.price) ? 
					product.data.discounted_price ? (
						<span><span class="text-3xl font-light text-zinc-900 dark:text-zinc-400 line-through">${product.data.price!.toFixed(2)}</span>  <span class="text-3xl font-bold text-zinc-900 dark:text-white">${product.data.discounted_price!.toFixed(2)}</span></span>
						
					) : (
						<span class="text-3xl font-bold text-zinc-900 dark:text-white">
							${product.data.price?.toFixed(2)}
						</span>
					)
				: "price not announced yet"
			}
			<AddToCart product={product} />
		</div>
	</div>
</div> -->